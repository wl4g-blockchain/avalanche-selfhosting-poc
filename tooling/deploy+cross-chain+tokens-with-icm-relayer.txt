
=== Deploy avalanche local network ===

docker run -d \
--name avalanche-localnet \
--restart unless-stopped \
--network host \
--entrypoint bash registry.cn-shenzhen.aliyuncs.com/wl4g/avalanche-local-base:v1.13.0 \
-c 'tail -f /dev/null'

# Enter the container.
docker exec -ti avalanche-localnet bash


avalanche-cli blockchain create mygames1 --evm --latest --evm-chain-id 43113001 --evm-token MYG1 --evm-defaults
avalanche-cli blockchain create mygames2 --evm --latest --evm-chain-id 43113002 --evm-token MYG2 --evm-defaults


avalanche-cli blockchain deploy mygames1 --local --teleporter-version v1.0.0 --relayer-version icm-relayer-v1.6.3 --icm-version v1.0.0
avalanche-cli blockchain deploy mygames2 --local --teleporter-version v1.0.0 --relayer-version icm-relayer-v1.6.3 --icm-version v1.0.0


avalanche-cli blockchain describe mygames1
avalanche-cli blockchain describe mygames2


curl -X POST --data '{
  "jsonrpc": "2.0", "id": 1, "method": "platform.getBlockchains"
}' -H 'content-type: application/json' http://localhost:9650/ext/bc/P
#{"jsonrpc":"2.0","result":{"blockchains":[{"id":"YL2K4mYBGGfpopSvNihsm58jhBL8Q8ZFwkjcfRDdqggMWkF1Q","name":"mygames1","subnetID":"2W9boARgCWL25z6pMFNtkCfNA5v28VGg9PmBgUJfuKndEdhrvw","vmID":"qDNbeu87sHXfCs4PaQSN2dGdkb843nxvxg2HBj4mkfZZQE4tc"},{"id":"2Rc81C5w3jnK9c5DbV59QXtHhUVFz4i83v6av4q1VtKejAArC3","name":"mygames1","subnetID":"28gzBJwZRKmzKdHZxnzbLaiABnKMHDcq2Aoazam9mmByniXsgx","vmID":"qDNbeu87sHXfCs4PaQSN2dGdkb843nxvxg2HBj4mkfZZQE4tc"},{"id":"2PisherAdpKfiLzSVgzHePNs32sKLSx8tdLZYtd1gf9364dGRD","name":"mygames2","subnetID":"YzJJaeoVBShPGk5mKastVqVk2tBh2ZxcX2rdfYkQp42SSx6S","vmID":"qDNbeu87sHaHvNBDN8K2epBvD7WAziU1hkMFCN8zFZoicnjjy"},{"id":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71","name":"C-Chain","subnetID":"11111111111111111111111111111111LpoYY","vmID":"mgj786NP7uDwBCcq6YwThhaN8FLyybkCa4zBWTQbNgmK6k9A6"},{"id":"2XYkjHB237QcS4SjzuZZekcpFXXQDXYdVg7zqdwURV78XQcu3C","name":"X-Chain","subnetID":"11111111111111111111111111111111LpoYY","vmID":"jvYyfQTxGMJLuGWa55kdP2p2zSUYsQ5Raupu4TW34ZAUBAbtq"}]},"id":1}


=== Operation for Demo ===

export CHAIN_ID_1=43113001
export CHAIN_ID_2=43113002
export CHAIN_RPC_URL_1="http://127.0.0.1:46255/ext/bc/1MVcrRFW8QujSdebpnMsRYWLMRM1FrKi2V7Je9ivu7zwHboos/rpc"
export CHAIN_RPC_URL_2="http://127.0.0.1:35517/ext/bc/2cE56bMf7SS5vTvdTpHAPfvxfTGryFsP7DNJNe7CwMXTRCPViZ/rpc"
# Own Test EOA accounts created on Metamask
export TEST_ACCOUNT_KEY_1="0x7bf00a22957531afd8cd99caf21c2090967a42cf2d26a03dfb55ec2dcc2ee118"
export TEST_ACCOUNT_ADDR_1="0xE3264679734A5d57E3ffb29905b1db37F9E418f9"
export TEST_ACCOUNT_KEY_2="0x35d52577ec6854a324e20dd7de5ca1e4b7c34f9b073b518b23c54857e8ee4010"
export TEST_ACCOUNT_ADDR_2="0xf7Ba3B240C66A62deA538C8B5FbE7b081Ddf2b5F"
# Pre-funding Initial EOA accounts created by Avalanche
export INIT_ACCOUNT_KEY_1="0xc422374747ed86d3f3e3d977967128965ba51a47b5ec198d05dff328120dc1d4"
export INIT_ACCOUNT_ADDR_1="0x104A729Ec7B7B1Ecc9933a14Dfad92BAB1218c64"
export INIT_ACCOUNT_KEY_2="0x1e324869565ffe00af3f64d0cb9f7f18903699b3c62f3dc4556cc41e8852cfeb"
export INIT_ACCOUNT_ADDR_2="0x97D49A1589D44A3aCCf327Fb6d42a5E3345FB698"


=== Native Token Transfer ===

cast send \
--rpc-url ${CHAIN_RPC_URL_1} \
--chain=43113001 \
--private-key ${INIT_ACCOUNT_KEY_1} \
--from ${INIT_ACCOUNT_ADDR_1} \
--value 5000ether \
${TEST_ACCOUNT_ADDR_1}

cast balance \
--rpc-url ${CHAIN_RPC_URL_1} \
${TEST_ACCOUNT_ADDR_1}


cast send \
--rpc-url ${CHAIN_RPC_URL_2} \
--chain=43113002 \
--private-key ${INIT_ACCOUNT_KEY_2} \
--from ${INIT_ACCOUNT_ADDR_2} \
--value 5500ether \
${TEST_ACCOUNT_ADDR_2}

cast balance \
--rpc-url ${CHAIN_RPC_URL_2} \
${TEST_ACCOUNT_ADDR_2}



=== Deploy Contract ===

export PRIVATE_KEY="${INIT_ACCOUNT_KEY_1}"

forge script script/DeployMyGamesNft.s.sol:DeployMyGamesNft --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_1} --broadcast -vvvv
export MYGAMES_NFT_ADDR_1="0x8E544f45f0A9bcEf113a6B707f5015d099a96ECe"

forge script script/DeployMyGamesToken.s.sol:DeployMyGamesToken --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_1} --broadcast -vvvv
export MYGAMES_TOKEN_ADDR_1="0x26BB8135E9C1979da193ab324cb5ecBA4A97cff3"

export PRIVATE_KEY="${INIT_ACCOUNT_KEY_2}"

forge script script/DeployMyGamesNft.s.sol:DeployMyGamesNft --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_2} --broadcast -vvvv
export MYGAMES_NFT_ADDR_2="0x14D4b67ffE1F8b838f91f5578E2e2Ef4eAc58AE3"

forge script script/DeployMyGamesToken.s.sol:DeployMyGamesToken --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_2} --broadcast -vvvv
export MYGAMES_TOKEN_ADDR_2="0x6E11c8B47CC5a9C2af8365B88F28DdDF93674FF4"



=== Mint NFTs ====

cast send \
--rpc-url=${CHAIN_RPC_URL_1} \
--private-key=${INIT_ACCOUNT_KEY_1} \
--chain=43113001 \
--legacy \
${MYGAMES_NFT_ADDR_1} \
"mint(address)" "${TEST_ACCOUNT_ADDR_1}"


cast call \
--rpc-url=${CHAIN_RPC_URL_1} \
${MYGAMES_NFT_ADDR_1} \
"balanceOf(address)(uint256)" "${TEST_ACCOUNT_ADDR_1}"


=== Transfer ERC20 Token ===

cast send \
--private-key=${INIT_ACCOUNT_KEY_1} \
--rpc-url=${CHAIN_RPC_URL_1} \
--chain=43113001 \
--legacy \
${MYGAMES_TOKEN_ADDR_1} \
"transfer(address,uint256)" "${TEST_ACCOUNT_ADDR_1}" 8000000000000000000000


cast call \
--rpc-url=${CHAIN_RPC_URL_1} \
${MYGAMES_TOKEN_ADDR_1} \
"balanceOf(address)(uint256)" \
"${TEST_ACCOUNT_ADDR_1}"
#8000000000000000000000


=== Cross chain messages ====

export PRIVATE_KEY="${INIT_ACCOUNT_KEY_1}"
forge script script/DeployCrossChainMessager.s.sol:DeployCrossChainMessager --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_1} --broadcast -vvvv

export MYGAMES_MESSAGER_ADDR_1="0x376787dBa2a4647D83483F2e25855637F9b4D94a"


export PRIVATE_KEY="${INIT_ACCOUNT_KEY_2}"
forge script script/DeployCrossChainMessager.s.sol:DeployCrossChainMessager --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_2} --broadcast -vvvv

export MYGAMES_MESSAGER_ADDR_2="0x832409Ea5f1ed53633e789B84FE77c1a9cD61FA8"


## 注：为什么使用 avalanche-cli 的 teleporter 子命令测试跨链发送后，再用 cast send 命令发送跨链消息就成功了？？？  且要触发多次？？？
avalanche-cli teleporter sendMsg mygames1 mygames2 "Hello 101" --destination-address "${MYGAMES_MESSAGER_ADDR_2}" --local


export CHAIN_ID_HEX_2="0xd3adf89911adb4fd1574248d5b9a4f80034de192c6f7e01036e47c28d1cff325"
cast send \
--private-key ${INIT_ACCOUNT_KEY_1} \
--rpc-url ${CHAIN_RPC_URL_1} \
${MYGAMES_MESSAGER_ADDR_1} \
"sendTeleportMessage(bytes32,address,string)" \
"${CHAIN_ID_HEX_2}" "${MYGAMES_MESSAGER_ADDR_2}" "Hello 101"


# ICM-Relayer Initializing Cross chains logs:
#{"level":"info","timestamp":"2025-05-20T20:34:43.313+0800","logger":"icm-relayer","caller":"main/main.go:555","msg":"Created application relayer","relayerID":"0xf28acaffc0469a0db1e169c9a61aaa5fcaf5724e43ea917d08b08cf1e319b7cc","sourceBlockchainID":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71","destinationBlockchainID":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71","originSenderAddress":"0x0000000000000000000000000000000000000000","destinationAddress":"0x0000000000000000000000000000000000000000"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.313+0800","logger":"icm-relayer","caller":"checkpoint/checkpoint.go:40","msg":"Creating checkpoint manager","relayerID":"0x68857375c0e0938a8a29aaf10deb1287299d8d625a1a1b9766dbbcf8bcc2fcf3","startingHeight":7}
#{"level":"info","timestamp":"2025-05-20T20:34:43.313+0800","logger":"icm-relayer","caller":"main/main.go:555","msg":"Created application relayer","relayerID":"0x68857375c0e0938a8a29aaf10deb1287299d8d625a1a1b9766dbbcf8bcc2fcf3","sourceBlockchainID":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71","destinationBlockchainID":"2Rc81C5w3jnK9c5DbV59QXtHhUVFz4i83v6av4q1VtKejAArC3","originSenderAddress":"0x0000000000000000000000000000000000000000","destinationAddress":"0x0000000000000000000000000000000000000000"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.313+0800","logger":"icm-relayer","caller":"checkpoint/checkpoint.go:40","msg":"Creating checkpoint manager","relayerID":"0xb6bc7f0e4375d28a9c55519a7dff17c53d1826e2aa1a0bca8d955025536d786e","startingHeight":7}
#{"level":"info","timestamp":"2025-05-20T20:34:43.314+0800","logger":"icm-relayer","caller":"main/main.go:555","msg":"Created application relayer","relayerID":"0xb6bc7f0e4375d28a9c55519a7dff17c53d1826e2aa1a0bca8d955025536d786e","sourceBlockchainID":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71","destinationBlockchainID":"2PisherAdpKfiLzSVgzHePNs32sKLSx8tdLZYtd1gf9364dGRD","originSenderAddress":"0x0000000000000000000000000000000000000000","destinationAddress":"0x0000000000000000000000000000000000000000"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.314+0800","logger":"icm-relayer","caller":"main/main.go:456","msg":"Created application relayers","blockchainID":"5T24nSPnQ4WWiW5uC3SLYovGVRTNK9GRxXdHH5AoShGp1bR71"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.317+0800","logger":"icm-relayer","caller":"main/main.go:555","msg":"Created application relayer","relayerID":"0x242f16422b6d909e050a43cbcbcd65c857d7e4bc6d14a592fd0a4621988cfda6","sourceBlockchainID":"2Rc81C5w3jnK9c5DbV59QXtHhUVFz4i83v6av4q1VtKejAArC3","destinationBlockchainID":"2Rc81C5w3jnK9c5DbV59QXtHhUVFz4i83v6av4q1VtKejAArC3","originSenderAddress":"0x0000000000000000000000000000000000000000","destinationAddress":"0x0000000000000000000000000000000000000000"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.318+0800","logger":"icm-relayer","caller":"checkpoint/checkpoint.go:40","msg":"Creating checkpoint manager","relayerID":"0x3719c0eba6fcae24b3eca5ccd496b0f9e3070cd5a72ee0fed754e8f0ff5b4f95","startingHeight":25}
#{"level":"info","timestamp":"2025-05-20T20:34:43.318+0800","logger":"icm-relayer","caller":"main/main.go:555","msg":"Created application relayer","relayerID":"0x3719c0eba6fcae24b3eca5ccd496b0f9e3070cd5a72ee0fed754e8f0ff5b4f95","sourceBlockchainID":"2Rc81C5w3jnK9c5DbV59QXtHhUVFz4i83v6av4q1VtKejAArC3","destinationBlockchainID":"2PisherAdpKfiLzSVgzHePNs32sKLSx8tdLZYtd1gf9364dGRD","originSenderAddress":"0x0000000000000000000000000000000000000000","destinationAddress":"0x0000000000000000000000000000000000000000"}
#{"level":"info","timestamp":"2025-05-20T20:34:43.318+0800","logger":"icm-relayer","caller":"checkpoint/checkpoint.go:40","msg":"Creating checkpoint manager","relayerID":"0x3ae967210bfd519e9ac9fd4b2f5ee4f39bc12d8dc65b6c441861d9a740d00872","startingHeight":25}

# ICM-Relayer Delivered logs:
#{"level":"info","timestamp":"2025-05-21T00:36:50.785+0800","logger":"icm-relayer","caller":"teleporter/message_handler.go:313","msg":"Delivered message to destination chain","warpMessageID":"2FVPN5upkc5zQZiPUhLc6mDW8W2DRZBndTQHNHitgSYmgVztQD","teleporterMessageID":"273nawiyS8spPEJFvMhNX9AoYLZpmqv2n81k2FsrRemQT59XEu","destinationBlockchainID":"2PisherAdpKfiLzSVgzHePNs32sKLSx8tdLZYtd1gf9364dGRD","txHash":"0x7d1a22084d15ef179946d291c33344c6308c8d951db05013f0f1dca55ff0b26e"}
#{"level":"info","timestamp":"2025-05-21T00:36:50.785+0800","logger":"icm-relayer","caller":"relayer/application_relayer.go:275","msg":"Finished relaying message to destination chain","relayerID":"0x3719c0eba6fcae24b3eca5ccd496b0f9e3070cd5a72ee0fed754e8f0ff5b4f95","destinationBlockchainID":"2PisherAdpKfiLzSVgzHePNs32sKLSx8tdLZYtd1gf9364dGRD","txHash":"0x7d1a22084d15ef179946d291c33344c6308c8d951db05013f0f1dca55ff0b26e"}



cast call \
--rpc-url ${CHAIN_RPC_URL_2} \
"${MYGAMES_MESSAGER_ADDR_2}" "lastMessage()(string)"
#"Hello 102"




=== Cross chain tokens ====

export PRIVATE_KEY="${INIT_ACCOUNT_KEY_1}"
forge script script/crosschaintoken/DeploySimpleERC20Bridge.s.sol:DeploySimpleERC20Bridge --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_1} --broadcast -vvvv

export MYGAMES_SIMPLE_BRIDGE_ADDR_1="0x4eD12cd8394708a8f2bd011F7db73AC715719d86"

export PRIVATE_KEY="${INIT_ACCOUNT_KEY_2}"
forge script script/crosschaintoken/DeploySimpleERC20Bridge.s.sol:DeploySimpleERC20Bridge --private-key ${PRIVATE_KEY} --rpc-url ${CHAIN_RPC_URL_2} --broadcast -vvvv

export MYGAMES_SIMPLE_BRIDGE_ADDR_2="0x4facC87BDe23b6E699768695A9DCD977eecad209"


# 在跨链转账前，我们可以首先检查一下 {TEST_ACCOUNT_ADDR_1} chain 1 上的 ERC20 Token 余额, 因为在之后一旦跨链转账成功，我们将看到期望效果，即 lock 了 amount 资金
cast call \
--rpc-url=${CHAIN_RPC_URL_1} \
${MYGAMES_TOKEN_ADDR_1} \
"balanceOf(address)(uint256)" \
"${TEST_ACCOUNT_ADDR_1}"


# 先检查 SimpleERC20Bridge 合约地址在 chain 2 拥有的 ERC20 Token 流动性(池)余额是否充足,
# 否则，之后执行跨链交易时，即因为 receiveTeleporterMessage() 中无法转账给 {TEST_ACCOUNT_ADDR_1} 即，为他铸造 Token 而失败
# 如果跨链转账成功，我们将看到 {TEST_ACCOUNT_ADDR_1} 地址也会在 chain 2 的 token 余额会增加 amount
cast call \
--rpc-url=${CHAIN_RPC_URL_2} \
${MYGAMES_TOKEN_ADDR_2} \
"balanceOf(address)(uint256)" \
"${MYGAMES_SIMPLE_BRIDGE_ADDR_2}"


# Firstly we are need to approve the token transfer
cast send \
--rpc-url=${CHAIN_RPC_URL_1} \
--private-key=${TEST_ACCOUNT_KEY_1} \
${MYGAMES_TOKEN_ADDR_1} \
"approve(address,uint256)(bool)" \
${MYGAMES_SIMPLE_BRIDGE_ADDR_1} \
200000000000000000000


export CHAIN_ID_HEX_2="0xd3adf89911adb4fd1574248d5b9a4f80034de192c6f7e01036e47c28d1cff325"
cast send \
--rpc-url ${CHAIN_RPC_URL_1} \
--private-key ${TEST_ACCOUNT_KEY_1} \
${MYGAMES_SIMPLE_BRIDGE_ADDR_1} \
"sendERC20WithICM(bytes32,address,address,address,uint256,string)" \
"${CHAIN_ID_HEX_2}" "${MYGAMES_SIMPLE_BRIDGE_ADDR_2}" "${MYGAMES_TOKEN_ADDR_1}" "${MYGAMES_TOKEN_ADDR_2}" 200000000000000000000 "Hello 101"


cast call \
--rpc-url ${CHAIN_RPC_URL_2} \
"${MYGAMES_SIMPLE_BRIDGE_ADDR_2}" "lastSwapOriginSenderAddress()(address)"
#0x4eD12cd8394708a8f2bd011F7db73AC715719d86

cast call \
--rpc-url ${CHAIN_RPC_URL_2} \
"${MYGAMES_SIMPLE_BRIDGE_ADDR_2}" "lastSwapAmount()(uint256)"
#200000000000000000000

cast call \
--rpc-url ${CHAIN_RPC_URL_2} \
"${MYGAMES_SIMPLE_BRIDGE_ADDR_2}" "lastSwapRemark()(string)"
#"Hello 101"









=========== tmp debug ==============

===== 要先将 INIT_ACCOUNT_KEY_2 的资金从 token contract on chain2 转给 bridge contract on chain2，
===== 因为 IERC20(destinationTokenAddress).transfer(to,amount) 时, 它才是 msg.sender

cast send \
--private-key=${INIT_ACCOUNT_KEY_2} \
--rpc-url=${CHAIN_RPC_URL_2} \
--chain=43113002 \
--legacy \
${MYGAMES_TOKEN_ADDR_2} \
"transfer(address,uint256)" "${MYGAMES_SIMPLE_BRIDGE_ADDR_2}" 8000000000000000000000


cast send \
--rpc-url ${CHAIN_RPC_URL_2} \
--private-key ${TEST_ACCOUNT_KEY_2} \
${MYGAMES_SIMPLE_BRIDGE_ADDR_2} \
"_mintToken(address,address,uint256,string)" \
"${MYGAMES_TOKEN_ADDR_2}" "${TEST_ACCOUNT_ADDR_1}" 200000000000000000000 "Hello 101"


cast send \
--private-key=${TEST_ACCOUNT_KEY_2} \
--rpc-url=${CHAIN_RPC_URL_2} \
--chain=43113002 \
--legacy \
${MYGAMES_TOKEN_ADDR_2} \
"transfer(address,uint256)" "${TEST_ACCOUNT_ADDR_1}" 200000000000000000000




========== TODO ===========

- [ ] Transfer the token [`MyGamesToken`](./src/MyGamesToken.sol) across chains to the Self-hosting Avalanche L1 `MyGames2` from `MyGames1` based on [`ICTT`](https://github.com/ava-labs/icm-contracts/tree/v1.0.8/contracts/ictt) bridge.